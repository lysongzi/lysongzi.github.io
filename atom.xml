<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[林友松の博客]]></title>
  <subtitle><![CDATA[少泡妹子多看书，多吃多睡多搞基]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lysongzi.com/"/>
<<<<<<< HEAD
<<<<<<< HEAD
  <updated>2015-08-23T14:04:24.601Z</updated>
=======
  <updated>2015-08-24T14:23:58.955Z</updated>
>>>>>>> 4766d41015f284087f7c8c97f72a9138d4a2705c
=======
  <updated>2015-08-30T03:18:53.134Z</updated>
>>>>>>> origin/theme-next
  <id>http://lysongzi.com/</id>
  
  <author>
    <name><![CDATA[lysongzZ_]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
<<<<<<< HEAD
<<<<<<< HEAD
=======
    <title><![CDATA[数据结构——SimpleList的java实现]]></title>
    <link href="http://lysongzi.com/2015/08/24/%E7%AE%80%E5%8D%95%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9E%E7%8E%B0%E2%80%94%E2%80%94SimpleList/"/>
    <id>http://lysongzi.com/2015/08/24/简单数组的实现——SimpleList/</id>
    <published>2015-08-24T12:57:59.000Z</published>
    <updated>2015-08-24T14:23:58.955Z</updated>
=======
    <title><![CDATA[数据结构——LinkedQueue的实现]]></title>
    <link href="http://lysongzi.com/2015/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94LinkedQueue%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://lysongzi.com/2015/08/30/数据结构——LinkedQueue的实现/</id>
    <published>2015-08-30T01:26:55.000Z</published>
    <updated>2015-08-30T03:18:53.134Z</updated>
    <content type="html"><![CDATA[<p>队列是一种先进先出(FIFO)的数据结构，LinkedQueue是用链表实现的，另外还可以用回环数组的方式实现。<br><a id="more"></a></p>
<h1 id="LinkedQueue">LinkedQueue</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 用单链表的形式实现链式队列</span><br><span class="line"> * 该实现包含有一个指向尾部节点的引用，方便入队列操作的实现</span><br><span class="line"> * @author Bingo</span><br><span class="line"> *</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> LinkedQueue&lt;T&gt; &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span>;</span><br><span class="line">	<span class="keyword">private</span> Node&lt;T&gt; head;</span><br><span class="line">	<span class="keyword">private</span> Node&lt;T&gt; tail;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> LinkedQueue()&#123;</span><br><span class="line">		<span class="keyword">size</span> = <span class="number">0</span>;</span><br><span class="line">		tail = head = <span class="keyword">new</span> Node&lt;T&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isEmpty()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">size</span>() == <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//return head == tail;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 进队列，在链表的尾部添加新的元素</span><br><span class="line">	 * @param ele</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> enqueue(T ele)&#123;</span><br><span class="line">		Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;T&gt;(ele, <span class="keyword">null</span>);</span><br><span class="line">		tail.<span class="keyword">next</span> = newNode;</span><br><span class="line">		tail = newNode;</span><br><span class="line">		<span class="keyword">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 出队列，在链表的头部取出元素</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> T dequeue()&#123;</span><br><span class="line">		<span class="keyword">if</span>(isEmpty())</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"queue is empty."</span>);</span><br><span class="line">		</span><br><span class="line">		T oldElement = head.<span class="keyword">next</span>.element;</span><br><span class="line">		head.<span class="keyword">next</span> = head.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">		<span class="keyword">size</span>--;</span><br><span class="line">		<span class="keyword">return</span> oldElement;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 私有节点类,保存节点元素值和指向下一个节点的引用</span><br><span class="line">	 * @author Bingo</span><br><span class="line">	 *</span><br><span class="line">	 * @param &lt;T&gt;</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Node&lt;T&gt;&#123;</span><br><span class="line">		<span class="keyword">public</span> T element;</span><br><span class="line">		<span class="keyword">public</span> Node&lt;T&gt; <span class="keyword">next</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> Node(T element, Node&lt;T&gt; <span class="keyword">next</span>)&#123;</span><br><span class="line">			<span class="keyword">this</span>.element  = element;</span><br><span class="line">			<span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> String toString() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"size = "</span> + <span class="keyword">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>队列是一种先进先出(FIFO)的数据结构，LinkedQueue是用链表实现的，另外还可以用回环数组的方式实现。<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://lysongzi.com/tags/Java/"/>
    
      <category term="List" scheme="http://lysongzi.com/tags/List/"/>
    
      <category term="Queue" scheme="http://lysongzi.com/tags/Queue/"/>
    
      <category term="数据结构" scheme="http://lysongzi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据结构——ArrayStack和LinkedStack的实现]]></title>
    <link href="http://lysongzi.com/2015/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94ArrayStack%E5%92%8CLinkedStack%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://lysongzi.com/2015/08/30/数据结构——ArrayStack和LinkedStack的实现/</id>
    <published>2015-08-30T01:26:31.000Z</published>
    <updated>2015-08-30T03:08:26.867Z</updated>
    <content type="html"><![CDATA[<p>栈是一种后进先出(LIFO)的数据结构。<br>ArrayStack使用数组来实现，LinkedStack使用链表来实现，各有特点，也都非常简单。<br>可以说这两个版本就是SimpleArrayList和SimpleLinkedList的简化版。<br><a id="more"></a></p>
<h1 id="ArrayStack">ArrayStack</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">import java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ArrayStack&lt;T&gt; &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">64</span>; </span><br><span class="line">	<span class="keyword">private</span> T[] elements;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 栈顶索引</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">		ensureCapacity(capacity);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> top+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 入栈</span><br><span class="line">	 * @param ele</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T ele)</span></span>&#123;</span><br><span class="line">		<span class="comment">/* 如果栈容量已经满了，则扩展栈大小 */</span></span><br><span class="line">		<span class="keyword">if</span>(size() == elements.length)</span><br><span class="line">			ensureCapacity(<span class="number">2</span> * size() + <span class="number">1</span>);</span><br><span class="line">		<span class="comment">/* 将元素添加到栈顶,并修改栈顶索引 */</span></span><br><span class="line">		elements[++top] = ele;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 出栈</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws NoSuchElementException</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> throws NoSuchElementException</span>&#123;</span><br><span class="line">		<span class="comment">/* 如果为空栈，则抛出异常 */</span></span><br><span class="line">		<span class="keyword">if</span>(isEmpty())</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Stack is empty."</span>);</span><br><span class="line">		<span class="comment">/* 返回栈顶元素,并修改栈顶位置 */</span></span><br><span class="line">		<span class="keyword">return</span> elements[top--];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 重置栈容量大小,可用于扩展栈容量大小</span><br><span class="line">	 * @param newCapacity</span><br><span class="line">	 */</span></span><br><span class="line">	@SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> newCapacity)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(newCapacity &lt; size())</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		</span><br><span class="line">		T[] old = elements;</span><br><span class="line">		elements = (T[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; size(); i++)&#123;</span><br><span class="line">			elements[i] = old[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@<span class="function">Override</span><br><span class="line">	<span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"top = "</span> + top + <span class="string">" size = "</span> + size();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="LinkedStack">LinkedStack</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> LinkedStack&lt;T&gt; &#123;</span><br><span class="line">	<span class="keyword">private</span> Node&lt;T&gt; head;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span> = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> LinkedStack()&#123;</span><br><span class="line">		head = <span class="keyword">new</span> Node&lt;T&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isEmpty()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">size</span>() == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 入栈操作</span><br><span class="line">	 * @param ele</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">push</span>(T ele)&#123;</span><br><span class="line">		Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;T&gt;(ele, head.<span class="keyword">next</span>);</span><br><span class="line">		head.<span class="keyword">next</span> = newNode;</span><br><span class="line">		<span class="keyword">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 出栈操作，弹出栈顶元素</span><br><span class="line">	 * @return 返回栈顶元素值</span><br><span class="line">	 * @throws NoSuchElementException</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> T <span class="keyword">pop</span>() <span class="keyword">throws</span> NoSuchElementException&#123;</span><br><span class="line">		<span class="keyword">if</span>(isEmpty())</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Stack is empty."</span>);</span><br><span class="line">		</span><br><span class="line">		T popElement = head.<span class="keyword">next</span>.data;</span><br><span class="line">		head.<span class="keyword">next</span> = head.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">		<span class="keyword">size</span>--;</span><br><span class="line">		<span class="keyword">return</span> popElement;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> String toString() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"size = "</span> + <span class="keyword">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Node&lt;T&gt;&#123;</span><br><span class="line">		<span class="keyword">public</span> T data;</span><br><span class="line">		<span class="keyword">public</span> Node&lt;T&gt; <span class="keyword">next</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> Node(T data, Node&lt;T&gt; <span class="keyword">next</span>)&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			<span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>栈是一种后进先出(LIFO)的数据结构。<br>ArrayStack使用数组来实现，LinkedStack使用链表来实现，各有特点，也都非常简单。<br>可以说这两个版本就是SimpleArrayList和SimpleLinkedList的简化版。<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://lysongzi.com/tags/Java/"/>
    
      <category term="List" scheme="http://lysongzi.com/tags/List/"/>
    
      <category term="Stack" scheme="http://lysongzi.com/tags/Stack/"/>
    
      <category term="数据结构" scheme="http://lysongzi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据结构——SimpleArrayList和SimpleLinkedList的实现]]></title>
    <link href="http://lysongzi.com/2015/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94SimpleArrayList%E5%92%8CSimpleLinkedList%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://lysongzi.com/2015/08/30/数据结构——SimpleArrayList和SimpleLinkedList的实现/</id>
    <published>2015-08-30T01:22:57.000Z</published>
    <updated>2015-08-30T03:01:56.386Z</updated>
    <content type="html"><![CDATA[<p>SimpleArrayList为用数组存储数据元素的方式实现的表，它是在SimpleList的基础上改进的。<br>SimpleLinkedList采取的是双链表的实现方式。<br><a id="more"></a></p>
<h1 id="SimpleArrayList">SimpleArrayList</h1><p>数组实现的表的特性：</p>
<blockquote>
<ol>
<li>可以非常快的随机访问表中第x个元素的值，所以当我们需要比较频繁的对数据进行随机访问存取的时候，这不失为一个很好的选择。</li>
<li>但是它的缺点也很明显，就是对于元素的插入和删除的花销都是线性增长的。因为无论是插入还是删除都需要涉及到元素的移位操作。其最坏的结果就是要在表的头部插入或删除元素，这需要把所有的元素都进行移位操作。  </li>
<li>因为使用数组存储的方式，如果要实现可动态扩展数组大小的话，就需要一些额外的花销。当插入元素的时候发现数组大小不够用了的时候就要对数组进行扩展，同时还要拷贝旧数组中的元素到新的数组中。</li>
</ol>
</blockquote>
<p>在这个SimpleArrayList中将实现Iterabel接口，但是没有实现当元素被修改时迭代器也失效的效果，这个留到SimpeLinkedList中实现。</p>
<h2 id="属性">属性</h2><p>private int[] elements ： 数组元素<br>private int size ： 表中元素个数<br>private final static int DEFAULT_CAPACITY ： 默认表大小   </p>
<h2 id="构造器">构造器</h2><blockquote>
<p>有两个构造器，一个是无参的构造器，将构造一个默认大小的表；另一个则是可以初始化表容量大小的构造器。</p>
</blockquote>
<pre><code><span class="function"><span class="keyword">public</span> <span class="title">SimpleArrayList</span><span class="params">()</span></span>{
    clear();
}

<span class="function"><span class="keyword">public</span> <span class="title">SimpleArrayList</span><span class="params">(<span class="keyword">int</span> capacity)</span> throws IllegalArgumentException</span>{
    <span class="keyword">if</span>(capacity &lt; <span class="number">0</span>)
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Capacity should be positive number."</span>);
    size = <span class="number">0</span>;
    ensureCapacity(capacity);
}
</code></pre><h2 id="方法">方法</h2><p>SimpleArrayList中大部分方法实现和SimpleList很类似，就不赘述了。</p>
<blockquote>
<p>ensureCapacity()： 扩展数组的大小，并且拷贝原数组中的元素。在这个函数中只有当新设置的容器大小至少等于当前容器大小的时候才有效，否则将忽略这个请求。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="keyword">void</span> ensureCapacity(<span class="built_in">int</span> newCapacity){
    <span class="comment">/* 判断新表大小是否大于等于当前容器中元素个数 */</span>
    <span class="keyword">if</span>(newCapacity &lt; <span class="built_in">size</span>())
        <span class="keyword">return</span>;
    T[] old = elements;
    <span class="comment">/* 创建新数组并拷贝旧数组元素 */</span>
    elements = (T[]) <span class="keyword">new</span> <span class="keyword">Object</span>[newCapacity];
    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i &lt; <span class="built_in">size</span>(); i++)
        elements[i] = old[i];
}
</code></pre><blockquote>
<p>trimToSize()：本函数可以释放数组中多余的空间,将数组的大小设置为当前表中元素个数。当我们已经确定了表的大小几乎不用发生改变了的时候可以进行该操作释放空间资源。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span></span>{
    ensureCapacity(size());
}
</code></pre><blockquote>
<p>add()：为插入元素的函数。  当数组大小不够用时会扩展数组。<br>append()：为在尾部追加元素的操作，这个操作不涉及元素的移位。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> idx, T ele) <span class="keyword">throws</span> ArrayIndexOutOfBoundsException{
    <span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; <span class="built_in">size</span>())
        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Idx is out of bounds."</span>);
    <span class="comment">/* 判断表是否已满，实则进行扩容操作  */</span>
    <span class="keyword">if</span>(<span class="built_in">size</span>() == elements.length)
        ensureCapacity(<span class="number">2</span> * <span class="built_in">size</span>() + <span class="number">1</span>);
    <span class="comment">/* 移动idx后的所有元素 */</span>
    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="built_in">size</span>(); i &gt; idx; i--)
        elements[i] = elements[i-<span class="number">1</span>];
    <span class="comment">/* 设置插入的元素值 */</span>
    elements[idx] = ele;
    <span class="built_in">size</span>++;
}

<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">append</span>(T ele){
    <span class="built_in">add</span>(<span class="built_in">size</span>(), ele);
}
</code></pre><blockquote>
<p>remove()：移除元素。</p>
</blockquote>
<pre><code><span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> idx)</span> throws ArrayIndexOutOfBoundsException</span>{
    <span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt;= size())
        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Idx is out of bounds."</span>);
    <span class="comment">/* 保存旧元素值 */</span>
    T removeElement = elements[idx];
    <span class="comment">/* idx后面的元素向前移动一位  */</span>
    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;size()-<span class="number">1</span>; i++)
        elements[i] = elements[i+<span class="number">1</span>];
    size--;
    <span class="keyword">return</span> removeElement;
}
</code></pre><blockquote>
<p>实现了Iterable接口的方法，返回一个Iterator对象。我自己实现了一个SimpleArrayListIterator类来实现迭代器。</p>
</blockquote>
<pre><code>@<span class="type">Override</span>
public <span class="type">Iterator</span>&lt;T&gt; <span class="keyword">iterator</span>() {
    <span class="keyword">return</span> new <span class="type">SimpleArrayListIterator</span>();
}
</code></pre><h2 id="内部类(SimpleArrayListIterator)">内部类(SimpleArrayListIterator)</h2><pre><code><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleArrayListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt;</span>{
    <span class="keyword">private</span> <span class="keyword">int</span> current = <span class="number">0</span>;
    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> current != size()? <span class="keyword">true</span> : <span class="keyword">false</span>;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>{
        <span class="comment">/* 判断是否到尾部,即其后还有没有元素 */</span>
        <span class="keyword">if</span>(!hasNext())
            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Has no next object."</span>);
        <span class="keyword">return</span> elements[current++];
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>{
        <span class="comment">/* 前置减,先计算后取值,所以删除的是刚调用next()后所指向的元素 */</span>
        SimpleArrayList.<span class="keyword">this</span>.remove(--current);
    }
}
</code></pre><h1 id="SimpleLinkedList">SimpleLinkedList</h1><p>链式实现的表的结构：</p>
<blockquote>
<ol>
<li>链表不能进行元素的随机访问，每次需要访问某个特定元素的时候都要从表头会表尾巴开始查找(双链表可以在表尾开始查找元素)。所以这些操作的花销都是线性增长的，并不鼓励对链表进行频繁的get, set操作。</li>
<li>链表最大的优点就是对于已知位置的插入和删除操作是非常快的，只需要常数时间就可以完成，而不需要对任何元素进行移位操作。链表适合于要对表频繁的进行插入和删除操作的情况。</li>
<li>链表采用的链式结构，节点都是非连续的存储在内存中的，只要内存空间充足，表的大小就可以看作是无限的。所以不需要额外的调整表大小的花销。</li>
</ol>
</blockquote>
<p>SimpleLinkedList采用了双链表的实现方式，并且在SimpleArrayList的基础上,不但实现了Iterable接口，还通过新增一个modCount变量来实现迭代器失效的效果。</p>
<h2 id="成员变量">成员变量</h2><p>private int size：表元素个数；<br>private int modCount：修改记录数，迭代器用来判断迭代期间是否发生修改；<br>private Node<code>&lt;T&gt;</code> head：指向头节点的引用；<br>private Node<code>&lt;T&gt;</code> tail：指向尾结点的引用。</p>
<h2 id="构造器-1">构造器</h2><pre><code><span class="function"><span class="keyword">public</span> <span class="title">SimpleLinkedList</span><span class="params">()</span></span>{
    clear();
}
</code></pre><h2 id="函数">函数</h2><blockquote>
<p>clear()：重置链表为空表。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="keyword">void</span> clear(){
    head = <span class="keyword">new</span> Node&lt;T&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);
    tail = <span class="keyword">new</span> Node&lt;T&gt;(<span class="keyword">null</span>, head, <span class="keyword">null</span>);
    head.<span class="keyword">next</span> = tail;
    <span class="keyword">size</span> = <span class="number">0</span>;
    modCount++;
}
</code></pre><blockquote>
<p>获取表中元素个数和判断是否是空表。    </p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>(){
    <span class="keyword">return</span> <span class="keyword">size</span>;
}

<span class="keyword">public</span> <span class="keyword">boolean</span> isEmpty(){
    <span class="keyword">return</span> <span class="keyword">size</span>() == <span class="number">0</span>;
    <span class="comment">//return head.next == tail;</span>
}
</code></pre><blockquote>
<p>getNode()：在链表中定位指定位置的元素，这里先判断要定位的元素处于元素前半部分还是后半部分，然后根据元素所在位置选择在头部还是尾部开始定位元素。</p>
</blockquote>
<pre><code><span class="comment">/**
 * 定位到索引idx所表示的结点,idx取值范围是0~size
 * <span class="doctag">@param</span> idx 节点索引位置
 * <span class="doctag">@return</span> 返回idx位置的节点对象
 * <span class="doctag">@throws</span> IndexOutOfBoundsException 
 */</span>
<span class="function"><span class="keyword">public</span> Node&lt;T&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> idx)</span> <span class="keyword">throws</span> IndexOutOfBoundsException</span>{
    <span class="comment">/* 判断idx是否越界，是则抛出异常 */</span>
    <span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; size())
        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();

    Node&lt;T&gt; p;
    <span class="comment">/* 如果要定位的元素在前半部分，则从前半部分开始定位s */</span>
    <span class="keyword">if</span>(idx &lt; size()/<span class="number">2</span>){
        p = head.next;
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; idx; i++)
            p = p.next;
    }
    <span class="comment">/* 元素在后半部分，则从尾部开始定位 */</span>
    <span class="keyword">else</span>{
        p = tail;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = size(); i &gt; idx; i--)
            p = p.prev;
    }
    <span class="keyword">return</span> p;
}
</code></pre><blockquote>
<p>append()：尾部追加元素。<br>add()：插入元素。<br>addBefore()：私有方法，在节点p的前面插入元素。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">append</span>(T data){
    <span class="built_in">add</span>(<span class="built_in">size</span>(), data);
    <span class="keyword">return</span> <span class="keyword">true</span>;
}

<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> idx, T data) <span class="keyword">throws</span> IndexOutOfBoundsException{
    addBefore(getNode(idx), data);
}

<span class="keyword">private</span> <span class="keyword">void</span> addBefore(Node&lt;T&gt; p, T data){
    Node&lt;T&gt; newOne = <span class="keyword">new</span> Node&lt;T&gt;(data, p.prev, p);
    p.prev.next = newOne;
    p.prev = newOne;

    <span class="built_in">size</span>++;
    modCount++;
}
</code></pre><blockquote>
<p>removeFirst()：删除第一个节点。<br>removeLast()：删除最后一个节点。<br>remove()：删除指定位置的节点。</p>
</blockquote>
<pre><code><span class="keyword">public</span> T removeFirst(){
    <span class="keyword">return</span> remove(getNode(<span class="number">0</span>));
}

<span class="keyword">public</span> T removeLast(){
    <span class="keyword">return</span> remove(<span class="keyword">size</span>()-<span class="number">1</span>);
}

<span class="keyword">public</span> T remove(<span class="keyword">int</span> idx) <span class="keyword">throws</span> IndexOutOfBoundsException{
    <span class="keyword">return</span> remove(getNode(idx));
}

<span class="keyword">private</span> T remove(Node&lt;T&gt; p) <span class="keyword">throws</span> IndexOutOfBoundsException{
    p.prev.<span class="keyword">next</span> = p.<span class="keyword">next</span>;
    p.<span class="keyword">next</span>.prev = p.prev;
    <span class="keyword">size</span>--;
    modCount++;
    <span class="keyword">return</span> p.data;
}
</code></pre><blockquote>
<p>get()：获取指定位置节点的元素值。<br>set()：给指定位置的节点设置新的元素值。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> idx)</span> <span class="keyword">throws</span> IndexOutOfBoundsException</span>{
    <span class="keyword">return</span> getNode(idx).data;
}

<span class="keyword">public</span> <span class="function">T <span class="title">set</span><span class="params">(<span class="keyword">int</span> idx, T newData)</span> <span class="keyword">throws</span> IndexOutOfBoundsException</span>{
    Node&lt;T&gt; p = getNode(idx);
    T oldData = p.data;
    p.data = newData;
    modCount++;
    <span class="keyword">return</span> oldData;
}
</code></pre><blockquote>
<p>实现了Iterable接口的方法，返回一个Iterator对象。我自己实现了一个SimpleLinkedListIterator类来实现迭代器。</p>
</blockquote>
<pre><code>@<span class="type">Override</span>
public <span class="type">Iterator</span>&lt;T&gt; <span class="keyword">iterator</span>() {
    <span class="keyword">return</span> new <span class="type">SimpleLinkedListIterator</span>();
}
</code></pre><h2 id="内部类">内部类</h2><blockquote>
<p>节点类</p>
</blockquote>
<pre><code><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Node&lt;T&gt;{
    <span class="keyword">public</span> T data;
    <span class="keyword">public</span> Node&lt;T&gt; prev;
    <span class="keyword">public</span> Node&lt;T&gt; <span class="keyword">next</span>;

    <span class="keyword">public</span> Node(T data, Node&lt;T&gt; prev, Node&lt;T&gt; <span class="keyword">next</span>){
        <span class="keyword">this</span>.data = data;
        <span class="keyword">this</span>.prev = prev;
        <span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;
    }
}
</code></pre><blockquote>
<p>SimpleLinkedListIterator</p>
</blockquote>
<pre><code><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleLinkedListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt;</span>{
    <span class="keyword">private</span> Node&lt;T&gt; current = head.next;
    <span class="keyword">private</span> <span class="keyword">int</span> ExpectedModCount = modCount;
    <span class="keyword">private</span> <span class="keyword">boolean</span> okToRemove = <span class="keyword">false</span>;

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> current != tail ? <span class="keyword">true</span> : <span class="keyword">false</span>;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>{
        <span class="keyword">if</span>(ExpectedModCount != modCount)
            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();
        <span class="keyword">if</span>(!hasNext())
            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();

        T data = current.data;
        current = current.next;
        okToRemove = <span class="keyword">true</span>;
        <span class="keyword">return</span> data;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>{
        <span class="keyword">if</span>(ExpectedModCount != modCount)
            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();
        <span class="keyword">if</span>(!okToRemove)
            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();

        SimpleLinkedList.<span class="keyword">this</span>.remove(current.prev);
        okToRemove = <span class="keyword">false</span>;
        ExpectedModCount++;
    }
}
</code></pre><h1 id="源代码">源代码</h1><h2 id="SimpleArrayList-java">SimpleArrayList.java</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 一个简单的ArrayList的实现,暂且忽略了collection等接口</span><br><span class="line"> * 只实现了Iterator接口，其返回一个自己实现的内部类SimpleArrayListIterator</span><br><span class="line"> * @author Bingo</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> class SimpleArrayList&lt;T&gt; implements Iterable&lt;T&gt; &#123;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 表的默认大小,当表中元素即将满时会扩展</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> DEFAULT_CAPACITY;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> T[] elements;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 无参构造器，创建一个默认大小的表</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> SimpleArrayList()&#123;</span><br><span class="line">		<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 构造一个自定义初始大小的构造器</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> SimpleArrayList(<span class="built_in">int</span> capacity) <span class="keyword">throws</span> IllegalArgumentException&#123;</span><br><span class="line">		<span class="keyword">if</span>(capacity &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Capacity should be positive number."</span>);</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">		ensureCapacity(capacity);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 返回容器中元素个数</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 判断表是否为空表</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span>() == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 重置为空表</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>()&#123;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">		ensureCapacity(DEFAULT_CAPACITY);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 重置表大小为容器中元素个数,释放多余的空间.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> trimToSize()&#123;</span><br><span class="line">		ensureCapacity(<span class="built_in">size</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 重置容器大小，可用于重置容器或者扩充容器大小.</span><br><span class="line">	 * 新容器大小要大于等于当前容器大小才有效，否则忽略.</span><br><span class="line">	 * @param newCapacity 新容器大小</span><br><span class="line">	 */</span></span><br><span class="line">	@SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> ensureCapacity(<span class="built_in">int</span> newCapacity)&#123;</span><br><span class="line">		<span class="comment">/* 判断新表大小是否大于等于当前容器中元素个数 */</span></span><br><span class="line">		<span class="keyword">if</span>(newCapacity &lt; <span class="built_in">size</span>())</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		T[] old = elements;</span><br><span class="line">		<span class="comment">/* 创建新数组并拷贝旧数组元素 */</span></span><br><span class="line">		elements = (T[]) <span class="keyword">new</span> <span class="keyword">Object</span>[newCapacity];</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i &lt; <span class="built_in">size</span>(); i++)</span><br><span class="line">			elements[i] = old[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 获取索引为idx的元素的值,idx取值为0~(size()-1)</span><br><span class="line">	 * @param idx 元素索引</span><br><span class="line">	 * @return 返回元素值</span><br><span class="line">	 * @throws ArrayIndexOutOfBoundsException 当idx超出表元素个数范围时抛出异常.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> T <span class="built_in">get</span>(<span class="built_in">int</span> idx) <span class="keyword">throws</span> ArrayIndexOutOfBoundsException&#123;</span><br><span class="line">		<span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt;= <span class="built_in">size</span>())</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Idx is out of bounds."</span>);</span><br><span class="line">		<span class="keyword">return</span> elements[idx];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 给索引为idx的元素设置新的元素值,idx取值为0~(size()-1)</span><br><span class="line">	 * @param idx 元素索引</span><br><span class="line">	 * @param ele 元素新的值</span><br><span class="line">	 * @return 旧的元素值</span><br><span class="line">	 * @throws ArrayIndexOutOfBoundsException 当idx超出表元素个数范围时抛出异常.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> T <span class="built_in">set</span>(<span class="built_in">int</span> idx, T ele) <span class="keyword">throws</span> ArrayIndexOutOfBoundsException&#123;</span><br><span class="line">		<span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt;= <span class="built_in">size</span>())</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Idx is out of bounds."</span>);</span><br><span class="line">		T old = elements[idx];</span><br><span class="line">		elements[idx] = ele;</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 插入新的元素</span><br><span class="line">	 * idx的取值范围为0-size(),idx为0-(size()-1)时即位在对应索引的元素前面插入元素,</span><br><span class="line">	 * idx为size()时，则是在尾部插入元素.</span><br><span class="line">	 * @param idx 插入的位置索引</span><br><span class="line">	 * @param ele 新的元素值</span><br><span class="line">	 * @throws ArrayIndexOutOfBoundsException 当idx超出范围时抛出异常.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> idx, T ele) <span class="keyword">throws</span> ArrayIndexOutOfBoundsException&#123;</span><br><span class="line">		<span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; <span class="built_in">size</span>())</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Idx is out of bounds."</span>);</span><br><span class="line">		<span class="comment">/* 判断表是否已满，实则进行扩容操作  */</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>() == elements.length)</span><br><span class="line">			ensureCapacity(<span class="number">2</span> * <span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">		<span class="comment">/* 移动idx后的所有元素 */</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="built_in">size</span>(); i &gt; idx; i--)</span><br><span class="line">			elements[i] = elements[i-<span class="number">1</span>];</span><br><span class="line">		<span class="comment">/* 设置插入的元素值 */</span></span><br><span class="line">		elements[idx] = ele;</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 在尾部追加新的元素</span><br><span class="line">	 * @param ele 新的元素值</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">append</span>(T ele)&#123;</span><br><span class="line">		<span class="built_in">add</span>(<span class="built_in">size</span>(), ele);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 移除索引idx所代表的元素, idx取值范围为</span><br><span class="line">	 * @param idx 索引位置</span><br><span class="line">	 * @return 返回被删除的元素值</span><br><span class="line">	 * @throws ArrayIndexOutOfBoundsException 当idx超出范围时抛出异常.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> T remove(<span class="built_in">int</span> idx) <span class="keyword">throws</span> ArrayIndexOutOfBoundsException&#123;</span><br><span class="line">		<span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt;= <span class="built_in">size</span>())</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Idx is out of bounds."</span>);</span><br><span class="line">		<span class="comment">/* 保存旧元素值 */</span></span><br><span class="line">		T removeElement = elements[idx];</span><br><span class="line">		<span class="comment">/* idx后面的元素向前移动一位  */</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=idx; i&lt;<span class="built_in">size</span>()-<span class="number">1</span>; i++)</span><br><span class="line">			elements[i] = elements[i+<span class="number">1</span>];</span><br><span class="line">		<span class="built_in">size</span>--;</span><br><span class="line">		<span class="keyword">return</span> removeElement;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 返回一个iterator对象,其是用内部类实现的一个SimpleArrayListIterator.</span><br><span class="line">	 */</span></span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;T&gt; iterator() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleArrayListIterator();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> class SimpleArrayListIterator implements Iterator&lt;T&gt;&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="built_in">int</span> current = <span class="number">0</span>;</span><br><span class="line">		@Override</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> hasNext() &#123;</span><br><span class="line">			<span class="keyword">return</span> current != <span class="built_in">size</span>()? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		<span class="keyword">public</span> T next() &#123;</span><br><span class="line">			<span class="comment">/* 判断是否到尾部,即其后还有没有元素 */</span></span><br><span class="line">			<span class="keyword">if</span>(!hasNext())</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Has no next object."</span>);</span><br><span class="line">			<span class="keyword">return</span> elements[current++];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		@Override</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> remove()&#123;</span><br><span class="line">			<span class="comment">/* 前置减,先计算后取值,所以删除的是刚调用next()后所指向的元素 */</span></span><br><span class="line">			SimpleArrayList.<span class="keyword">this</span>.remove(--current);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.<span class="built_in">append</span>(<span class="string">"SimpleArrayList ["</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i &lt; <span class="built_in">size</span>(); i++)</span><br><span class="line">			sb.<span class="built_in">append</span>(elements[i] + <span class="string">","</span>);</span><br><span class="line">		sb = sb.delete(sb.length()-<span class="number">1</span>, sb.length());</span><br><span class="line">		sb.<span class="built_in">append</span>(<span class="string">"] size = "</span> + <span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SimpleLinkedList-java">SimpleLinkedList.java</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ConcurrentModificationException;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 一个简单LinkedList的实现，采用的是双向链表形式，并且表中维护一个头节点和一个尾节点。</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author Bingo</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param &lt;T&gt;</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">public class SimpleLinkedList<span class="variable">&lt;T&gt;</span> implements Iterable<span class="variable">&lt;T&gt;</span> &#123;</span><br><span class="line">	private int size;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 一个记录修改次数的变量,用于迭代器中进行判断迭代期间是否发生修改.</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	private int modCount = 0;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 头节点，next域指向第一个结点元素</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	private Node<span class="variable">&lt;T&gt;</span> head;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 尾节点，prev指向最后一个结点元素</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	private Node<span class="variable">&lt;T&gt;</span> tail;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 构造器</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public SimpleLinkedList()&#123;</span><br><span class="line">		clear();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 重置表为空表</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public void clear()&#123;</span><br><span class="line">		head = new Node<span class="variable">&lt;T&gt;</span>(null, null, null);</span><br><span class="line">		tail = new Node<span class="variable">&lt;T&gt;</span>(null, head, null);</span><br><span class="line">		head.next = tail;</span><br><span class="line">		size = 0;</span><br><span class="line">		modCount++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 查询表中元素个数</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public int size()&#123;</span><br><span class="line">		return size;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 判断是否为空表</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public boolean isEmpty()&#123;</span><br><span class="line">		return size() == 0;</span><br><span class="line">		//return head.next == tail;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 定位到索引idx所表示的结点,idx取值范围是0~size</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param idx 节点索引位置</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return 返回idx位置的节点对象</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@throws IndexOutOfBoundsException </span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public Node<span class="variable">&lt;T&gt;</span> getNode(int idx) throws IndexOutOfBoundsException&#123;</span><br><span class="line">		/<span class="keyword">*</span> 判断idx是否越界，是则抛出异常 <span class="keyword">*</span>/</span><br><span class="line">		if(idx <span class="variable">&lt; 0 || idx &gt;</span> size())</span><br><span class="line">			throw new IndexOutOfBoundsException();</span><br><span class="line">		</span><br><span class="line">		Node<span class="variable">&lt;T&gt;</span> p;</span><br><span class="line">		/<span class="keyword">*</span> 如果要定位的元素在前半部分，则从前半部分开始定位s <span class="keyword">*</span>/</span><br><span class="line">		if(idx <span class="variable">&lt; size()/2)&#123;</span><br><span class="line">			p = head.next;</span><br><span class="line">			for(int i=0; i &lt; idx; i++)</span><br><span class="line">				p = p.next;</span><br><span class="line">		&#125;</span><br><span class="line">		/* 元素在后半部分，则从尾部开始定位 */</span><br><span class="line">		else&#123;</span><br><span class="line">			p = tail;</span><br><span class="line">			for(int i = size(); i &gt;</span> idx; i--)</span><br><span class="line">				p = p.prev;</span><br><span class="line">		&#125;</span><br><span class="line">		return p;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 在尾部追加元素</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param data 新增元素值</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return 添加成功返回true</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public boolean append(T data)&#123;</span><br><span class="line">		add(size(), data);</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 在指定位置idx处的前部添加元素,idx取值范围为0~size</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param idx 待插入元素的位置idx</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param data 新的元素值</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@throws IndexOutOfBoundsException</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public void add(int idx, T data) throws IndexOutOfBoundsException&#123;</span><br><span class="line">		addBefore(getNode(idx), data);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 在节点p的前部插入新的元素</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param p 带插入值的结点</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param data 新的元素值</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	private void addBefore(Node<span class="variable">&lt;T&gt;</span> p, T data)&#123;</span><br><span class="line">		Node<span class="variable">&lt;T&gt;</span> newOne = new Node<span class="variable">&lt;T&gt;</span>(data, p.prev, p);</span><br><span class="line">		p.prev.next = newOne;</span><br><span class="line">		p.prev = newOne;</span><br><span class="line">		</span><br><span class="line">		size++;</span><br><span class="line">		modCount++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 删除第一个元素</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return 返回第一个元素的值</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public T removeFirst()&#123;</span><br><span class="line">		return remove(getNode(0));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 删除最后一个元素</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return 返回最后一个元素的值</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public T removeLast()&#123;</span><br><span class="line">		return remove(size()-1);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 删除位置idx所表示的节点对象</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param idx 结点索引</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return 返回被删除的结点p的值</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@throws IndexOutOfBoundsException</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public T remove(int idx) throws IndexOutOfBoundsException&#123;</span><br><span class="line">		return remove(getNode(idx));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 删除结点p</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param p </span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return 返回被删除的结点p的值</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@throws IndexOutOfBoundsException</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	private T remove(Node<span class="variable">&lt;T&gt;</span> p) throws IndexOutOfBoundsException&#123;</span><br><span class="line">		p.prev.next = p.next;</span><br><span class="line">		p.next.prev = p.prev;</span><br><span class="line">		size--;</span><br><span class="line">		modCount++;</span><br><span class="line">		return p.data;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 获取第idx位元素的值</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param idx 索引位置</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return 返回查找到的元素值</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@throws IndexOutOfBoundsException</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public T get(int idx) throws IndexOutOfBoundsException&#123;</span><br><span class="line">		return getNode(idx).data;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 设置第idx位元素的值为新的元素值</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param idx 索引位置</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param newData 新的元素值</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@return 返回旧的元素值</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@throws IndexOutOfBoundsException</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	public T set(int idx, T newData) throws IndexOutOfBoundsException&#123;</span><br><span class="line">		Node<span class="variable">&lt;T&gt;</span> p = getNode(idx);</span><br><span class="line">		T oldData = p.data;</span><br><span class="line">		p.data = newData;</span><br><span class="line">		modCount++;</span><br><span class="line">		return oldData;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 实现iterable接口的方法,返回一个自定义的SimpleLinkedList对象</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	<span class="comment">@Override</span></span><br><span class="line">	public Iterator<span class="variable">&lt;T&gt;</span> iterator() &#123;</span><br><span class="line">		return new SimpleLinkedListIterator();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 私有节点类,保存数据data，并且包括指向前驱结点和后继结点的引用.</span><br><span class="line">	 <span class="keyword">*</span> 本类设置为私有类,且所以成员属性都设置为共有的.即使如此，也只有外部类可以直接访问该类中的成员变量,</span><br><span class="line">	 <span class="keyword">*</span> 方便外部类中代码的实现.</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@author Bingo</span></span><br><span class="line">	 <span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@param &lt;T&gt;</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	private static class Node<span class="variable">&lt;T&gt;</span>&#123;</span><br><span class="line">		public T data;</span><br><span class="line">		public Node<span class="variable">&lt;T&gt;</span> prev;</span><br><span class="line">		public Node<span class="variable">&lt;T&gt;</span> next;</span><br><span class="line">		</span><br><span class="line">		public Node(T data, Node<span class="variable">&lt;T&gt;</span> prev, Node<span class="variable">&lt;T&gt;</span> next)&#123;</span><br><span class="line">			this.data = data;</span><br><span class="line">			this.prev = prev;</span><br><span class="line">			this.next = next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 实现了iterator接口的类.</span><br><span class="line">	 <span class="keyword">*</span> <span class="comment">@author Bingo</span></span><br><span class="line">	 <span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	private class SimpleLinkedListIterator implements Iterator<span class="variable">&lt;T&gt;</span>&#123;</span><br><span class="line">		private Node<span class="variable">&lt;T&gt;</span> current = head.next;</span><br><span class="line">		private int ExpectedModCount = modCount;</span><br><span class="line">		private boolean okToRemove = false;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">@Override</span></span><br><span class="line">		public boolean hasNext() &#123;</span><br><span class="line">			return current != tail ? true : false;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">@Override</span></span><br><span class="line">		public T next() &#123;</span><br><span class="line">			if(ExpectedModCount != modCount)</span><br><span class="line">				throw new ConcurrentModificationException();</span><br><span class="line">			if(!hasNext())</span><br><span class="line">				throw new NoSuchElementException();</span><br><span class="line">			</span><br><span class="line">			T data = current.data;</span><br><span class="line">			current = current.next;</span><br><span class="line">			okToRemove = true;</span><br><span class="line">			return data;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">@Override</span></span><br><span class="line">		public void remove()&#123;</span><br><span class="line">			if(ExpectedModCount != modCount)</span><br><span class="line">				throw new ConcurrentModificationException();</span><br><span class="line">			if(!okToRemove)</span><br><span class="line">				throw new IllegalStateException();</span><br><span class="line">			</span><br><span class="line">			SimpleLinkedList.this.remove(current.prev);</span><br><span class="line">			okToRemove = false;</span><br><span class="line">			ExpectedModCount++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>SimpleArrayList为用数组存储数据元素的方式实现的表，它是在SimpleList的基础上改进的。<br>SimpleLinkedList采取的是双链表的实现方式。<br>]]>
    
    </summary>
    
      <category term="ArrayList" scheme="http://lysongzi.com/tags/ArrayList/"/>
    
      <category term="Java" scheme="http://lysongzi.com/tags/Java/"/>
    
      <category term="LinkedList" scheme="http://lysongzi.com/tags/LinkedList/"/>
    
      <category term="List" scheme="http://lysongzi.com/tags/List/"/>
    
      <category term="数据结构" scheme="http://lysongzi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据结构——SimpleList的实现]]></title>
    <link href="http://lysongzi.com/2015/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94SimpleList%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://lysongzi.com/2015/08/24/数据结构——SimpleList的实现/</id>
    <published>2015-08-24T12:57:59.000Z</published>
    <updated>2015-08-30T01:31:47.599Z</updated>
>>>>>>> origin/theme-next
    <content type="html"><![CDATA[<p>这个<strong>SimepleList</strong>就是一个最简单的用数组实现的表。为了更好的表达表这个结构的特点，只实现存储int型数组的形式。并且没有结合泛型，接口等机制进行更高层次的抽象处理，不过以后我会在这个基础上编写一个类似JDK中的ArrayList类的数据结构。<br><a id="more"></a></p>
<p>这个SimpleList主要涉及以下功能点：  </p>
<ul>
<li>创建表；</li>
<li>重置表；</li>
<li>查询表中数据元素个数；</li>
<li>在位置x插入数据元素；</li>
<li>删除位置x的数据元素；</li>
<li>在尾部追加数据元素；</li>
<li>修改位置x的元素值；</li>
<li>获取位置x的元素值；</li>
<li>判断表是否为空表；</li>
<li>判断表是否已经满；</li>
<li>输出数组当前所有元素。</li>
</ul>
<h2 id="属性">属性</h2><ul>
<li>public static int DEFAULT_CAPACITY ： 默认表大小</li>
<li>private int size ： 表中元素个数</li>
<li>private int[] elements ： 元素数组 </li>
</ul>
<p></p>
<h2 id="构造器">构造器</h2><blockquote>
<p>共有两个构造器，一个为使用默认容器大小来构造表，一个则是使用自定义大小。<br>clear()和init()函数功能见后，主要是用来初始化成员变量的。</p>
</blockquote>
<pre><code><span class="keyword">public</span> SimpleList(){
    <span class="built_in">clear</span>();
}

<span class="keyword">public</span> SimpleList(<span class="built_in">int</span> <span class="built_in">size</span>){
    <span class="built_in">size</span> = <span class="number">0</span>;
    init(<span class="built_in">size</span>);
}
</code></pre><h2 id="函数">函数</h2><blockquote>
<p>inti()初始化元素数组。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>{
    elements = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];
}
</code></pre><blockquote>
<p>clear()函数用默认构造函数重置表的状态</p>
</blockquote>
<pre><code><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>{
    size = <span class="number">0</span>;
    init(DEFAULT_CAPACITY);
}
</code></pre><blockquote>
<p>接下来是典型的一行代码实现的功能。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>(){<span class="keyword">return</span> <span class="keyword">size</span>;}
<span class="keyword">public</span> <span class="keyword">boolean</span> isEmpty(){
    <span class="keyword">return</span> <span class="keyword">size</span> == <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;
}
<span class="keyword">public</span> <span class="keyword">boolean</span> isFull(){
    <span class="keyword">return</span> <span class="keyword">size</span>() == elements.length ? <span class="keyword">true</span> : <span class="keyword">false</span>;
}
</code></pre><blockquote>
<p>insert()在指定位置idx插入一个元素，idx的取值范围为0~size.  idx为size则在尾部插入元素,其余则是idx位置的前面插入元素。<br>在插入操作中，其花销是比较昂贵的。因为插入元素时，会涉及到元素的移动。最坏的情况则是在头部插入元素，则需要把原来的所有元素都后移一位，这个函数的时间复杂度是线性增长的。</p>
</blockquote>
<pre><code><span class="function"><span class="keyword">public</span> boolean <span class="title">insert</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> ele)</span></span>{
    <span class="comment">/* 表已满 */</span>
    <span class="keyword">if</span>(isFull())
        <span class="keyword">return</span> <span class="literal">false</span>;
    <span class="comment">/* 判断传入的参数pos是否合法 ,= =,这个和上面的可以合并？*/</span>
    <span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; size)
        <span class="keyword">return</span> <span class="literal">false</span>;
    <span class="comment">/* idx位置及其后所有数据后移一位 */</span>
    <span class="keyword">for</span>(<span class="keyword">int</span> i=size()-<span class="number">1</span>; i &gt;= idx; i--){
        elements[i+<span class="number">1</span>] = elements[i];
    }
    elements[idx] = ele;
    size++;
    <span class="keyword">return</span> <span class="literal">true</span>;
}
</code></pre><blockquote>
<p>append()复用insert()方法，只在数组尾部插入的元素。该方法的时间复杂度是常数，并不涉及元素的移动。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="keyword">append</span>(<span class="keyword">int</span> ele){
    <span class="keyword">return</span> insert(<span class="keyword">size</span>(), ele);
}
</code></pre><blockquote>
<p>根据提供的索引获取对应元素的值，这里可能就会涉及到当提供的索引是非法的情况，本实现中该情况处理为抛出一个异常。<br>同样的根据索引设置新的元素值也是类似的。</p>
</blockquote>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getElementByPos</span><span class="params">(<span class="keyword">int</span> idx)</span> <span class="keyword">throws</span> IllegalArgumentException</span>{
    <span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; size())
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The param idx is illegal."</span>);
    <span class="keyword">return</span> elements[idx];
}

<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setElementByPos</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> ele)</span> <span class="keyword">throws</span> IllegalArgumentException</span>{
    <span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; size())
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The param idx is illegal."</span>);
    elements[idx] = ele;
}
</code></pre><blockquote>
<p>移除数组中的元素的时间复杂度也是线性增长的。当有元素被删除时，可能需要把该元素后的所有元素前移一位，最坏情况就是删除第一个元素。</p>
</blockquote>
<pre><code><span class="function"><span class="keyword">public</span> boolean <span class="title">remove</span><span class="params">(<span class="keyword">int</span> idx)</span></span>{
    <span class="comment">/* 判断是否空表 */</span>
    <span class="keyword">if</span>(isEmpty())
        <span class="keyword">return</span> <span class="literal">false</span>;
    <span class="comment">/* 判断idx是否合法 */</span>
    <span class="keyword">if</span>(idx&lt;<span class="number">0</span> || idx&gt;size()-<span class="number">1</span>)
        <span class="keyword">return</span> <span class="literal">false</span>;
    <span class="comment">/* idx往后的元素前移一位 */</span>
    <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;size()-<span class="number">1</span>; i++){
        elements[i] = elements[i+<span class="number">1</span>];
    }
    size--;
    elements[size] = <span class="number">0</span>; <span class="comment">/* 初始化移位产生的多余元素 */</span>
    <span class="keyword">return</span> <span class="literal">true</span>;
}
</code></pre><blockquote>
<p>这里重写了toString()方法，打印数组元素，只是为了方便测试看结果。哈哈哈哈哈。。。。</p>
</blockquote>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function">String <span class="title">toString</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> <span class="string">"ArrayTable [element="</span> + Arrays.toString(elements) + <span class="string">"] size="</span> + size;
}
<<<<<<< HEAD
</code></pre><h2 id="总结">总结</h2><p>该数据结构实现还是很简单的，纯属入门的练手之作。<br>全部源码:<a href=""><strong>传送门</strong></a></p>
=======
</code></pre><h2 id="总结">总结</h2><p>该数据结构实现还是很简单的，纯属入门的练手之作。  </p>
<h2 id="源代码">源代码</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 用简单数组来实现表的数据结构</span><br><span class="line"> * 该数据结构只要涉及以下功能：</span><br><span class="line"> * 1.创建表; </span><br><span class="line"> * 2.删除表中所有数据;</span><br><span class="line"> * 3.查询表中数据元素个数;</span><br><span class="line"> * 4.在位置x插入数据元素;</span><br><span class="line"> * 5.删除位置x的数据元素;</span><br><span class="line"> * 6.在尾部追加数据元素;</span><br><span class="line"> * 7.修改某个位置的元素值;</span><br><span class="line"> * 8.获取某个位置的元素值;</span><br><span class="line"> * 9.判断表是否为空表;</span><br><span class="line"> * 10.输出数组当前所有元素.</span><br><span class="line"> * </span><br><span class="line"> * PS:本版本数组大小不可变.</span><br><span class="line"> * @author Bingo</span><br><span class="line"> * @version 0.1 </span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> class SimpleList &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span>[] elements;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 默认表大小</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="built_in">int</span> DEFAULT_CAPACITY = <span class="number">8</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 默认构造函数，默认数组大小为64个数据元素</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> SimpleList()&#123;</span><br><span class="line">		<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 根据用户的需求创建响应大小的表</span><br><span class="line">	 * @param size 表元素个数</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> SimpleList(<span class="built_in">int</span> <span class="built_in">size</span>)&#123;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">		init(<span class="built_in">size</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 返回当前表中数据元素个数</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 判断表是否为空表</span><br><span class="line">	 * @return 空表返回true，否则返回false</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span> == <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 初始化数组</span><br><span class="line">	 * @param capacity 数组容量大小</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> init(<span class="built_in">int</span> capacity)&#123;</span><br><span class="line">		elements = <span class="keyword">new</span> <span class="built_in">int</span>[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 初始化所有数据为0</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>()&#123;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">		init(DEFAULT_CAPACITY);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 判断表是否已满</span><br><span class="line">	 * @return 表满了返回true，否则返回false</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> isFull()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span>() == elements.length ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 在位置idx插入一个元素,其中idx取值为0~size,</span><br><span class="line">	 * idx为0则为在头部插入元素,idx为size则在尾部插入元素,</span><br><span class="line">	 * 所以本插入函数为在idx位置的前面插入元素,size表示最后一个元素的后面.</span><br><span class="line">	 * @param ele 待插入元素值</span><br><span class="line">	 * @param idx 插入的位置</span><br><span class="line">	 * @return 插入成功返回true，插入失败返回false</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> insert(<span class="built_in">int</span> idx, <span class="built_in">int</span> ele)&#123;</span><br><span class="line">		<span class="comment">/* 表已满 */</span></span><br><span class="line">		<span class="keyword">if</span>(isFull())</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="comment">/* 判断传入的参数pos是否合法 ,= =,这个和上面的可以合并？*/</span></span><br><span class="line">		<span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; <span class="built_in">size</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="comment">/* idx位置及其后所有数据后移一位 */</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="built_in">size</span>()-<span class="number">1</span>; i &gt;= idx; i--)&#123;</span><br><span class="line">			elements[i+<span class="number">1</span>] = elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements[idx] = ele;</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 在尾部追加一个元素.</span><br><span class="line">	 * @param ele 元素值</span><br><span class="line">	 * @return 追加元素成功返回true,否则返回false.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">append</span>(<span class="built_in">int</span> ele)&#123;</span><br><span class="line">		<span class="keyword">return</span> insert(<span class="built_in">size</span>(), ele);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 获取下标为idx的元素，取值范围是0~(size-1).</span><br><span class="line">	 * @param idx 元素下标</span><br><span class="line">	 * @return 返回获取的元素值</span><br><span class="line">	 * @throws IllegalArgumentException 当pos取值范围不合法时抛出异常.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> getElementByPos(<span class="built_in">int</span> idx) <span class="keyword">throws</span> IllegalArgumentException&#123;</span><br><span class="line">		<span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; <span class="built_in">size</span>())</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The param idx is illegal."</span>);</span><br><span class="line">		<span class="keyword">return</span> elements[idx];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 给下标为idx的元素设置一个新的值.</span><br><span class="line">	 * @param ele 新的元素值 </span><br><span class="line">	 * @param idx 元素的下标</span><br><span class="line">	 * @throws IllegalArgumentException 当idx取值范围不合法时抛出异常.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setElementByPos(<span class="built_in">int</span> idx, <span class="built_in">int</span> ele) <span class="keyword">throws</span> IllegalArgumentException&#123;</span><br><span class="line">		<span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; <span class="built_in">size</span>())</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The param idx is illegal."</span>);</span><br><span class="line">		elements[idx] = ele;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 移除表中下标为idx的元素，idx的取值范围为0~(size-1).</span><br><span class="line">	 * @param idx 元素下标</span><br><span class="line">	 * @return 删除成功返回true，否则返回false</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="built_in">int</span> idx)&#123;</span><br><span class="line">		<span class="comment">/* 判断是否空表 */</span></span><br><span class="line">		<span class="keyword">if</span>(isEmpty())</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="comment">/* 判断idx是否合法 */</span></span><br><span class="line">		<span class="keyword">if</span>(idx&lt;<span class="number">0</span> || idx&gt;<span class="built_in">size</span>()-<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="comment">/* idx往后的元素前移一位 */</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=idx; i&lt;<span class="built_in">size</span>()-<span class="number">1</span>; i++)&#123;</span><br><span class="line">			elements[i] = elements[i+<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">size</span>--;</span><br><span class="line">		elements[<span class="built_in">size</span>] = <span class="number">0</span>; <span class="comment">/* 初始化移位产生的多余元素 */</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"ArrayTable [element="</span> + Arrays.toString(elements) + <span class="string">"] size="</span> + <span class="built_in">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
>>>>>>> origin/theme-next
]]></content>
    <summary type="html">
    <![CDATA[<p>这个<strong>SimepleList</strong>就是一个最简单的用数组实现的表。为了更好的表达表这个结构的特点，只实现存储int型数组的形式。并且没有结合泛型，接口等机制进行更高层次的抽象处理，不过以后我会在这个基础上编写一个类似JDK中的ArrayList类的数据结构。<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://lysongzi.com/tags/Java/"/>
    
      <category term="List" scheme="http://lysongzi.com/tags/List/"/>
    
      <category term="数据结构" scheme="http://lysongzi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
<<<<<<< HEAD
>>>>>>> 4766d41015f284087f7c8c97f72a9138d4a2705c
=======
>>>>>>> origin/theme-next
    <title><![CDATA[Markdown语法学习笔记]]></title>
    <link href="http://lysongzi.com/2015/08/22/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://lysongzi.com/2015/08/22/Markdown语法学习笔记/</id>
    <published>2015-08-22T14:21:33.000Z</published>
<<<<<<< HEAD
<<<<<<< HEAD
    <updated>2015-08-23T14:04:24.601Z</updated>
=======
    <updated>2015-08-23T14:20:55.247Z</updated>
>>>>>>> 4766d41015f284087f7c8c97f72a9138d4a2705c
=======
    <updated>2015-08-23T14:20:55.247Z</updated>
>>>>>>> origin/theme-next
    <content type="html"><![CDATA[<p>Maekdown语法都是由一些符号所组成，并且这些符号简单易懂，一看就能了解它的含义。现在好多博客和网站的输入框都可以支持Markdown语法进行文本编辑了。最后使用Markdown的一个最大的好处就是文本可以离线编辑，还可以确保文本的格式，不一定要在线的输入框里进行编辑。<br><a id="more"></a></p>
<h1 id="Markdown_语法说明_缩减版/(完全版传送门)">Markdown 语法说明_缩减版/(<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">完全版传送门</a>)</h1><ul>
<li><a href="#Overview">区块元素</a><ul>
<li><a href="#p">段落和换行</a></li>
<<<<<<< HEAD
<<<<<<< HEAD
<li><a href="#header">标题</a></li>
=======
<li><a href="#headline">标题</a></li>
>>>>>>> 4766d41015f284087f7c8c97f72a9138d4a2705c
=======
<li><a href="#headline">标题</a></li>
>>>>>>> origin/theme-next
<li><a href="#blockquote">区块引用</a></li>
<li><a href="#list">列表</a></li>
<li><a href="#codeblock">代码块</a></li>
<li><a href="#hr">分隔线</a></li>
</ul>
</li>
</ul>
<<<<<<< HEAD
<<<<<<< HEAD
<h1 id="Overview">区块元素</h1>

=======
<p></p><h1 id="Overview">区块元素</h1><p></p>
>>>>>>> 4766d41015f284087f7c8c97f72a9138d4a2705c
=======
<p></p><h1 id="Overview">区块元素</h1><p></p>
>>>>>>> origin/theme-next
<p></p><h2 id="p">段落和换行</h2><p></p>
<blockquote>
<p>1) 在段落中可以通过手动输入 <code>&lt;br/&gt;</code> 来实现文本中的强制换行。<br>2) 如果一定要Markdown来自动生成 <code>&lt;br/&gt;</code> 来实现换行的话，就在插入的地方按两个以上空格然后回车。</p>
</blockquote>
<p><br></p>
<<<<<<< HEAD
<<<<<<< HEAD
<p></p><h2 id="header">标题</h2><br>Markdown支持两种方式来实现标题：  <p></p>
<p>1) 利用 “<code>=</code>“ 来表示一级标题，用 “<code>-</code>“  来表示二级标题，其中符号可以是任意多个的。  </p>
=======
<p></p><h2 id="headline">标题</h2><br>Markdown支持两种方式来实现标题：<br>1) 利用 “<code>=</code>“ 来表示一级标题，用 “<code>-</code>“  来表示二级标题，其中符号可以是任意多个的。  <p></p>
>>>>>>> 4766d41015f284087f7c8c97f72a9138d4a2705c
=======
<p></p><h2 id="headline">标题</h2><br>Markdown支持两种方式来实现标题：<br>1) 利用 “<code>=</code>“ 来表示一级标题，用 “<code>-</code>“  来表示二级标题，其中符号可以是任意多个的。  <p></p>
>>>>>>> origin/theme-next
<pre><code><span class="header">一级标题
======</span>
二级标题
<span class="bullet">-------  </span>
</code></pre><p>效果如下：  </p>
<blockquote>
<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2></blockquote>
<p>2) 利用 “<code>#</code>“ 来表示一级标题，用 “<code>##</code>“ 来表示二级标题。等级可以由1-6，分别为 <code>#</code> 的个数</p>
<pre><code><span class="preprocessor"># 一级标题 h1</span>
<span class="preprocessor">## 二级标题 h2</span>
<span class="preprocessor">###### 六级标题 h6  </span>
</code></pre><p>效果如下：</p>
<blockquote>
<h1 id="一级标题_h1">一级标题 h1</h1><h2 id="二级标题_h2">二级标题 h2</h2><h6 id="六级标题_h6">六级标题 h6</h6></blockquote>
<p><br></p>
<p></p><h2 id="blockquote">区块引用</h2><br>只需要在要引用的段落前添加 <code>&gt;</code> 符号，还允许偷懒只在段落第一行使用 <code>&gt;</code> 符号。<p></p>
<pre><code>&gt;This is a blockquote with two paragraphs. Lo<span class="comment">rem ipsum dolor sit</span>
amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere 
lectus.Vestibulum enim wisi, viverra nec, fringilla <span class="flow">in</span>, laoreet
vitae, risus.

&gt;Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre><p>并且 <code>&gt;</code> 可以嵌套使用，且在其中还可以使用别的Markdown语法。</p>
<pre><code>&gt; <span class="comment">## 这是一个标题。</span>
&gt; 
&gt; <span class="number">1</span>.   这是第一行列表项。
&gt; <span class="number">2</span>.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt;     <span class="built_in">return</span> shell_<span class="built_in">exec</span>(<span class="string">"echo <span class="variable">$input</span> | <span class="variable">$markdown_script</span>"</span>);
</code></pre><p>效果如下：</p>
<blockquote>
<h2 id="这是一个标题。">这是一个标题。</h2><ol>
<li>这是第一行列表项。</li>
<li>这是第二行列表项。</li>
</ol>
<p>给出一些例子代码：</p>
<pre><code><span class="built_in">return</span> shell_<span class="built_in">exec</span>(<span class="string">"echo <span class="variable">$input</span> | <span class="variable">$markdown_script</span>"</span>);
</code></pre></blockquote>
<p><br>  </p>
<p></p><h2 id="list">列表</h2><br>Markdown支持无序列表和有序列表。这个不止可以用来编列列表，还可以让长段的文字也按列表形式排列，可自行尝试。<br>其中可以使用 <code>*</code>, <code>+</code>, <code>-</code> 号来实现列表。并且通过缩进可以书写二级列表。如下：  <p></p>
<pre><code>*  <span class="built_in">red</span>
*  <span class="built_in">green</span>
*  <span class="built_in">blue</span>

+  <span class="built_in">red</span>
    +  dark <span class="built_in">red</span>
    +  light <span class="built_in">red</span>
+  <span class="built_in">green</span>
+  <span class="built_in">blue</span>

-  <span class="built_in">red</span>
-  <span class="built_in">green</span>
-  <span class="built_in">blue</span>  
</code></pre><p>效果如下：</p>
<blockquote>
<ul>
<li>red<ul>
<li>dark red</li>
<li>light red</li>
</ul>
</li>
<li>green</li>
<li>blue  </li>
</ul>
</blockquote>
<p>通过书写数字和<code>.</code>可以生成有序列表，其中数字不是有序的也无所谓。  </p>
<pre><code><span class="number">1.</span> red
<span class="number">49.</span> green
<span class="number">30.</span> blue
</code></pre><p>效果如下:</p>
<blockquote>
<ol>
<li>red</li>
<li>green</li>
<li>blue  </li>
</ol>
</blockquote>
<p><br></p>
<p></p><h2 id="codeblock">代码块</h2><br>如果想要插入一段代码（即形成一个代码块），并且保持代码的一定样式，只需要简单缩进4个空格或者1个制表符就可以了。<p></p>
<pre><code><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
    <span class="built_in">printf</span>(<span class="string">"hello world."</span>);
}  
</code></pre><p>当我们使用了一些高亮代码块的插件之后。我们则还可以通过三个`符号来包含代码块，例如:</p>
<<<<<<< HEAD
<<<<<<< HEAD
<pre><code><span class="comment"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"hello world."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></span>
</code></pre><p>效果如下： </p>
<pre><code><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
    <span class="built_in">printf</span>(<span class="string">"hello world."</span>);
}
</code></pre><p><br></p>
<p></p><h2 id="hr">分隔线</h2><br>在一行中使用连续三个及以上的 <code>*</code>, <code>-</code>, <code>_</code> 号，且这行中不包含别的符号，就可以生成一条分割线。符号之间还可以包括空格。  <p></p>
<pre><code><span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
---
______________________
</code></pre><p>效果如下：  </p>
<hr>
<hr>
<h2 id="**"><strong><strong><em>**</em></strong></strong></h2><hr>
=======
=======
>>>>>>> origin/theme-next
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<p></p><h2 id="hr">分隔线</h2><br>在一行中使用连续三个及以上的 <code>*</code>, <code>-</code>, <code>_</code> 号，且这行中不包含别的符号，就可以生成一条分割线。符号之间还可以包括空格。  <p></p>
<pre><code><span class="bullet">* </span><span class="bullet">* *</span>
<span class="emphasis">***</span>
<span class="emphasis">***</span>
<span class="bullet">- </span>- -
<span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span>__
</code></pre><p>效果如下：  </p>
<hr>
<hr>
<hr>
<hr>
<hr>
<<<<<<< HEAD
>>>>>>> 4766d41015f284087f7c8c97f72a9138d4a2705c
=======
>>>>>>> origin/theme-next
<p><br></p>
<p>持续更行中…(最新更新时间：2015/8/23)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Maekdown语法都是由一些符号所组成，并且这些符号简单易懂，一看就能了解它的含义。现在好多博客和网站的输入框都可以支持Markdown语法进行文本编辑了。最后使用Markdown的一个最大的好处就是文本可以离线编辑，还可以确保文本的格式，不一定要在线的输入框里进行编辑。<br>]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://lysongzi.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你好，世界！]]></title>
<<<<<<< HEAD
    <link href="http://lysongzi.com/2015/08/22/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C%EF%BC%81/"/>
    <id>http://lysongzi.com/2015/08/22/你好，世界！/</id>
    <published>2015-08-21T16:02:30.458Z</published>
    <updated>2015-08-21T16:02:30.458Z</updated>
    <content type="html"><![CDATA[<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.lysongzi.Main</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Main</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="l]]>
=======
    <link href="http://lysongzi.com/2015/08/20/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C%EF%BC%81/"/>
    <id>http://lysongzi.com/2015/08/20/你好，世界！/</id>
    <published>2015-08-20T14:21:33.000Z</published>
    <updated>2015-08-30T01:19:53.357Z</updated>
    <content type="html"><![CDATA[<p>Hello,World!<br><a id="more"></a><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.lysongzi.Main</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Main</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hello,World!<br>]]>
    
>>>>>>> origin/theme-next
    </summary>
    
      <category term="HelloWorld" scheme="http://lysongzi.com/tags/HelloWorld/"/>
    
      <category term="Hexo" scheme="http://lysongzi.com/tags/Hexo/"/>
    
      <category term="Java" scheme="http://lysongzi.com/tags/Java/"/>
    
  </entry>
  
</feed>
